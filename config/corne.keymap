/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        comma {
            bindings = <&kp COMMA>;
            key-positions = <13 12>;
        };

        dot {
            bindings = <&kp PERIOD>;
            key-positions = <13 12 11>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <11 13>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <23 22>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <16 17>;
        };

        excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <16 17 18>;
        };

        semi {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 18>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <26 27>;
        };

        amp {
            bindings = <&kp AMPERSAND>;
            key-positions = <26 27 28>;
        };

        par1 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <22 21>;
        };

        par2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <27 28>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <17 18>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <17 18 19>;
        };

        dv {
            bindings = <&kp PERCENT>;
            key-positions = <12 23>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <14 15>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <13 16>;
        };

        ast {
            bindings = <&kp ASTERISK>;
            key-positions = <23 22 21>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <12 17>;
        };

        screen {
            bindings = <&kp LG(LS(NUMBER_4))>;
            key-positions = <21 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q  &kp W  &kp E                           &kp R                &kp T           &kp Y        &kp U      &kp I               &kp O              &kp P
  &kp A  &kp S  &kp D                           &kp F                &kp G           &kp H        &kp J      &kp K               &kp L              &kp GRAVE
  &kp Z  &kp X  &kp C                           &kp V                &kp B           &kp N        &kp M      &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp BACKSLASH
                &mt LEFT_COMMAND LA(BACKSPACE)  &mt LCTRL BACKSPACE  &lt 7 ESCAPE    &lt 8 ENTER  &kp SPACE  &mt LEFT_SHIFT TAB
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &sys_reset    &none         &none             &none           &none                     &kp ESCAPE     &kp HOME  &kp UP_ARROW  &kp END      &kp BACKSPACE
  &sk LCTRL     &sk LEFT_ALT  &sk LEFT_COMMAND  &sk LEFT_SHIFT  &sk LC(RA(LEFT_SHIFT))    &kp PAGE_UP    &kp LEFT  &kp DOWN      &kp RIGHT    &kp TAB
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_PRV      &bt BT_NXT                &kp PAGE_DOWN  &kp DEL   &kp K_COPY    &kp K_PASTE  &kp LA(BACKSPACE)
                              &trans            &tog 4          &none                     &lt 9 ENTER    &trans    &trans
            >;
        };

        coding {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp LS(EXCL)           &kp LS(LEFT_BRACE)        &kp LS(RIGHT_BRACE)        &kp PLUS        &kp LS(STAR)     &kp LS(CARET)  &kp LS(TILDE)  &kp EQUAL  &kp BSLH  &kp LS(PRCNT)
  &mt AT_SIGN AMPERSAND  &kp LS(LEFT_PARENTHESIS)  &kp LS(RIGHT_PARENTHESIS)  &kp LS(DOLLAR)  &kp LS(QMARK)    &kp LS(DQT)    &kp SQT        &kp COMMA  &kp DOT   &kp SEMI
  &kp LS(PIPE)           &kp LS(LESS_THAN)         &kp LS(GREATER_THAN)       &kp MINUS       &kp FSLH         &kp LS(COLON)  &kp LS(UNDER)  &kp LBKT   &kp RBKT  &kp LS(POUND)
                                                   &trans                     &trans          &lt 9 SPACE      &none          &tog 5         &trans
            >;
        };

        numbers {
            bindings = <
  &trans     &trans        &trans            &kp PLUS        &kp ASTERISK              &kp ESCAPE      &mt F7 N7        &mt F8 N8        &mt F9 N9        &kp BACKSPACE
  &sk LCTRL  &sk LEFT_ALT  &sk LEFT_COMMAND  &sk LEFT_SHIFT  &sk LA(LC(LEFT_SHIFT))    &mt F11 COMMA   &mt F4 NUMBER_4  &mt F5 N5        &mt F6 NUMBER_6  &mt F10 N0
  &trans     &trans        &trans            &kp MINUS       &kp SLASH                 &mt F12 PERIOD  &mt F1 NUMBER_1  &mt F2 NUMBER_2  &mt F3 NUMBER_3  &kp ENTER
                           &trans            &tog 6          &none                     &none           &tog 6           &trans
            >;
        };

        nav_lock {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        code_lock {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_lock {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        nav_temp {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        code_temp {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_temp {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav_lock {
            if-layers = <4>;
            then-layer = <1>;
        };

        code_lock {
            if-layers = <5>;
            then-layer = <2>;
        };

        num_lock {
            if-layers = <6>;
            then-layer = <3>;
        };

        nav_temp {
            if-layers = <7>;
            then-layer = <1>;
        };

        code_temp {
            if-layers = <8>;
            then-layer = <2>;
        };

        num_temp {
            if-layers = <9>;
            then-layer = <3>;
        };
    };
};
